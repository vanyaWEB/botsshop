from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from sqlalchemy.orm import Session
import logging

from database.db import get_db
from database import crud
from utils.payment import create_payment, check_payment_status
from utils.keyboards import get_back_button
from utils.helpers import format_price
from config import ADMIN_IDS

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data.startswith("pay_order_"))
async def initiate_payment(callback: CallbackQuery):
    """Initiate payment for order"""
    with get_db() as db:
        order_id = int(callback.data.split("_")[-1])
        
        order = crud.get_order(db, order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Check if user owns this order
        user = crud.get_or_create_user(
            db,
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name,
            callback.from_user.last_name
        )
        
        if order.user_id != user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑", show_alert=True)
            return
        
        if order.status == 'completed':
            await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
            return
        
        if order.status == 'cancelled':
            await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            return
        
        # Create payment
        payment_data = create_payment(
            amount=order.total_amount,
            order_id=order.id,
            description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}",
            return_url=f"https://t.me/{(await callback.bot.get_me()).username}"
        )
        
        if not payment_data:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
        
        # Update order with payment ID
        crud.update_order_status(db, order.id, 'pending', payment_id=payment_data['id'])
        
        # Send payment link
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data['confirmation_url'])],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{order.id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders")]
        ])
        
        text = f"""
<b>üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}</b>

<b>–°—É–º–º–∞:</b> {format_price(order.total_amount)}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
"""
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery):
    """Check payment status"""
    with get_db() as db:
        order_id = int(callback.data.split("_")[-1])
        
        order = crud.get_order(db, order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if not order.payment_id:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Check payment status
        payment_status = check_payment_status(order.payment_id)
        
        if not payment_status:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        if payment_status['status'] == 'succeeded' and payment_status['paid']:
            # Update order status
            crud.update_order_status(db, order.id, 'completed')
            
            # Notify admins
            await notify_admins_about_order(callback.bot, order)
            
            await callback.message.edit_text(
                f"""
<b>‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>

–ó–∞–∫–∞–∑ #{order.id} –æ–ø–ª–∞—á–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.
–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

<b>–°—É–º–º–∞:</b> {format_price(order.total_amount)}
""",
                reply_markup=get_back_button("my_orders")
            )
            await callback.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        
        elif payment_status['status'] == 'canceled':
            crud.update_order_status(db, order.id, 'cancelled')
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            await callback.message.edit_text(
                f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ó–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=get_back_button("my_orders")
            )
        
        else:
            await callback.answer(
                f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_status['status']}\n–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...",
                show_alert=True
            )


async def notify_admins_about_order(bot, order):
    """Notify admins about new paid order"""
    text = f"""
üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>

<b>üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>
ID: {order.user.telegram_id}
Username: @{order.user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ò–º—è: {order.user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

<b>üì¶ –¢–æ–≤–∞—Ä—ã:</b>
"""
    
    for item in order.items:
        size_text = f" ({item.size})" if item.size else ""
        text += f"‚Ä¢ {item.product_name}{size_text} √ó {item.quantity}\n"
    
    text += f"\n<b>üí∞ –°—É–º–º–∞:</b> {format_price(order.total_amount)}"
    
    if order.phone:
        text += f"\n<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}"
    if order.delivery_address:
        text += f"\n<b>üìç –ê–¥—Ä–µ—Å:</b> {order.delivery_address}"
    if order.comment:
        text += f"\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.comment}"
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º", callback_data=f"admin_order_{order.id}")]
    ])
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")
