from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy.orm import Session

from database.db import get_db
from database import crud
from utils.keyboards import get_orders_keyboard, get_order_detail_keyboard, get_back_button
from utils.helpers import format_price, get_user_theme

router = Router()


@router.callback_query(F.data == "my_orders")
async def show_orders(callback: CallbackQuery):
    """Show user's orders"""
    try:
        with get_db() as db:
            user = crud.get_or_create_user(
                db,
                callback.from_user.id,
                callback.from_user.username,
                callback.from_user.first_name,
                callback.from_user.last_name
            )
            
            orders = crud.get_orders(db, user_id=user.id, limit=20)
            
            if not orders:
                await callback.message.edit_text(
                    "<b>üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
                    reply_markup=get_back_button("main_menu")
                )
                await callback.answer()
                return
            
            text = "<b>üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:\n\n"
            
            for order in orders[:10]:
                status_text = {
                    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                    'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
                    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
                }.get(order.status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                text += f"–ó–∞–∫–∞–∑ #{order.id} ‚Ä¢ {format_price(order.total_amount)}\n"
                text += f"{status_text} ‚Ä¢ {order.created_at.strftime('%d.%m.%Y')}\n\n"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_orders_keyboard(orders)
            )
            await callback.answer()
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
        print(f"[ERROR] show_orders: {e}")


@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery):
    """Show order details"""
    try:
        with get_db() as db:
            order_id = int(callback.data.split("_")[-1])
            
            order = crud.get_order(db, order_id)
            
            if not order:
                await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            user = crud.get_or_create_user(
                db,
                callback.from_user.id,
                callback.from_user.username,
                callback.from_user.first_name,
                callback.from_user.last_name
            )
            
            if order.user_id != user.id:
                await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑", show_alert=True)
                return
            
            status_text = {
                'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
            }.get(order.status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            text = f"""
<b>üì¶ –ó–∞–∫–∞–∑ #{order.id}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
<b>–î–∞—Ç–∞:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}

<b>üìã –¢–æ–≤–∞—Ä—ã:</b>
"""
            
            for item in order.items:
                size_text = f" ({item.size})" if item.size else ""
                text += f"‚Ä¢ {item.product_name}{size_text}\n"
                text += f"  {item.quantity} √ó {format_price(item.price)} = {format_price(item.quantity * item.price)}\n"
            
            text += f"\n<b>üí∞ –ò—Ç–æ–≥–æ: {format_price(order.total_amount)}</b>"
            
            if order.phone:
                text += f"\n\n<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}"
            if order.delivery_address:
                text += f"\n<b>üìç –ê–¥—Ä–µ—Å:</b> {order.delivery_address}"
            if order.comment:
                text += f"\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.comment}"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_order_detail_keyboard(order)
            )
            await callback.answer()
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
        print(f"[ERROR] show_order_details: {e}")


@router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order(callback: CallbackQuery):
    """Cancel order"""
    try:
        with get_db() as db:
            order_id = int(callback.data.split("_")[-1])
            
            order = crud.get_order(db, order_id)
            
            if not order:
                await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            user = crud.get_or_create_user(
                db,
                callback.from_user.id,
                callback.from_user.username,
                callback.from_user.first_name,
                callback.from_user.last_name
            )
            
            if order.user_id != user.id:
                await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑", show_alert=True)
                return
            
            if order.status != 'pending':
                await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å", show_alert=True)
                return
            
            crud.update_order_status(db, order_id, 'cancelled')
            
            await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            await show_orders(callback)
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
        print(f"[ERROR] cancel_order: {e}")
