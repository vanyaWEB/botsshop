from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session

from database.db import get_db
from database import crud
from utils.keyboards import get_cart_keyboard, get_back_button
from utils.helpers import format_price, get_user_theme, is_subscribed
from config import REQUIRED_CHANNEL_ID

router = Router()


class CheckoutStates(StatesGroup):
    waiting_phone = State()
    waiting_address = State()
    waiting_comment = State()


@router.callback_query(F.data == "cart")
async def show_cart(callback: CallbackQuery):
    """Show user's cart"""
    try:
        with get_db() as db:
            user = crud.get_or_create_user(
                db,
                callback.from_user.id,
                callback.from_user.username,
                callback.from_user.first_name,
                callback.from_user.last_name
            )
            
            cart_items = crud.get_cart_items(db, user.id)
            
            if not cart_items:
                await callback.message.edit_text(
                    "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
                    reply_markup=get_back_button("main_menu")
                )
                await callback.answer()
                return
            
            total = sum(item.product.price * item.quantity for item in cart_items)
            
            text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
            
            for item in cart_items:
                size_text = f" (–†–∞–∑–º–µ—Ä: {item.size})" if item.size else ""
                item_total = item.product.price * item.quantity
                text += f"<b>{item.product.name}</b>{size_text}\n"
                text += f"{item.quantity} √ó {format_price(item.product.price)} = {format_price(item_total)}\n\n"
            
            text += f"<b>–ò—Ç–æ–≥–æ: {format_price(total)}</b>"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_cart_keyboard(cart_items, total)
            )
            await callback.answer()
    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
        print(f"[ERROR] show_cart: {e}")


@router.callback_query(F.data.startswith("cart_increase_"))
async def increase_cart_item(callback: CallbackQuery):
    """Increase cart item quantity"""
    try:
        with get_db() as db:
            cart_item_id = int(callback.data.split("_")[-1])
            
            cart_item = crud.get_cart_item(db, cart_item_id)
            if not cart_item:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if cart_item.quantity >= cart_item.product.stock:
                await callback.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart_item.product.stock}", show_alert=True)
                return
            
            crud.update_cart_item(db, cart_item_id, cart_item.quantity + 1)
            
            await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
            await show_cart(callback)
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", show_alert=True)
        print(f"[ERROR] increase_cart_item: {e}")


@router.callback_query(F.data.startswith("cart_decrease_"))
async def decrease_cart_item(callback: CallbackQuery):
    """Decrease cart item quantity"""
    with get_db() as db:
        cart_item_id = int(callback.data.split("_")[-1])
        
        cart_item = crud.get_cart_item(db, cart_item_id)
        if not cart_item:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if cart_item.quantity <= 1:
            crud.remove_cart_item(db, cart_item_id)
            await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            crud.update_cart_item(db, cart_item_id, cart_item.quantity - 1)
            await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
        
        await show_cart(callback)


@router.callback_query(F.data.startswith("cart_remove_"))
async def remove_cart_item(callback: CallbackQuery):
    """Remove item from cart"""
    with get_db() as db:
        cart_item_id = int(callback.data.split("_")[-1])
        
        crud.remove_cart_item(db, cart_item_id)
        
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        await show_cart(callback)


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    """Clear entire cart"""
    with get_db() as db:
        user = crud.get_or_create_user(
            db,
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name,
            callback.from_user.last_name
        )
        
        crud.clear_cart(db, user.id)
        
        await callback.message.edit_text(
            "<b>üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.",
            reply_markup=get_back_button("main_menu")
        )
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")


@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    """Start checkout process"""
    try:
        with get_db() as db:
            if REQUIRED_CHANNEL_ID:
                subscribed = await is_subscribed(callback.bot, callback.from_user.id, REQUIRED_CHANNEL_ID)
                if not subscribed:
                    from utils.keyboards import get_subscription_keyboard
                    await callback.message.edit_text(
                        "<b>‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
                        reply_markup=get_subscription_keyboard()
                    )
                    await callback.answer()
                    return
            
            user = crud.get_or_create_user(
                db,
                callback.from_user.id,
                callback.from_user.username,
                callback.from_user.first_name,
                callback.from_user.last_name
            )
            
            cart_items = crud.get_cart_items(db, user.id)
            
            if not cart_items:
                await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
                return
            
            for item in cart_items:
                if item.product.stock < item.quantity:
                    await callback.answer(
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {item.product.name} –Ω–∞ —Å–∫–ª–∞–¥–µ (–¥–æ—Å—Ç—É–ø–Ω–æ: {item.product.stock})",
                        show_alert=True
                    )
                    return
            
            await callback.message.edit_text(
                "<b>üì± –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
                reply_markup=get_back_button("cart")
            )
            await state.set_state(CheckoutStates.waiting_phone)
            await callback.answer()
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        print(f"[ERROR] start_checkout: {e}")


@router.message(CheckoutStates.waiting_phone)
async def process_phone(message: Message, state: FSMContext):
    """Process phone number"""
    phone = message.text.strip()
    
    await state.update_data(phone=phone)
    await message.answer(
        "<b>üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_back_button("cart")
    )
    await state.set_state(CheckoutStates.waiting_address)


@router.message(CheckoutStates.waiting_address)
async def process_address(message: Message, state: FSMContext):
    """Process delivery address"""
    address = message.text.strip()
    
    await state.update_data(address=address)
    await message.answer(
        "<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=get_back_button("cart")
    )
    await state.set_state(CheckoutStates.waiting_comment)


@router.message(CheckoutStates.waiting_comment)
async def process_comment(message: Message, state: FSMContext):
    """Process order comment and create order"""
    with get_db() as db:
        comment = None if message.text == "/skip" else message.text.strip()
        
        data = await state.get_data()
        phone = data.get("phone")
        address = data.get("address")
        
        user = crud.get_or_create_user(
            db,
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        cart_items = crud.get_cart_items(db, user.id)
        
        if not cart_items:
            await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=get_back_button("main_menu"))
            await state.clear()
            return
        
        # Create order
        order = crud.create_order(
            db,
            user.id,
            cart_items,
            phone=phone,
            delivery_address=address,
            comment=comment
        )
        
        # Clear cart
        crud.clear_cart(db, user.id)
        
        # Build order summary
        text = f"""
<b>‚úÖ –ó–∞–∫–∞–∑ #{order.id} —Å–æ–∑–¥–∞–Ω!</b>

<b>üì¶ –¢–æ–≤–∞—Ä—ã:</b>
"""
        
        for item in order.items:
            size_text = f" ({item.size})" if item.size else ""
            text += f"‚Ä¢ {item.product_name}{size_text} √ó {item.quantity} = {format_price(item.price * item.quantity)}\n"
        
        text += f"\n<b>üí∞ –ò—Ç–æ–≥–æ: {format_price(order.total_amount)}</b>\n"
        text += f"\n<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}"
        text += f"\n<b>üìç –ê–¥—Ä–µ—Å:</b> {address}"
        if comment:
            text += f"\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
        
        text += "\n\n<b>–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</b>"
        
        from utils.keyboards import get_checkout_keyboard
        await message.answer(text, reply_markup=get_checkout_keyboard(order.id))
        
        await state.clear()
