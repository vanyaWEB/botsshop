from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import io

from database.db import get_db
from database import crud
from utils.keyboards import (
    get_admin_main_keyboard,
    get_admin_categories_keyboard,
    get_admin_products_keyboard,
    get_admin_users_keyboard,
    get_admin_orders_keyboard,
    get_admin_stats_keyboard,
    get_back_to_admin_keyboard,
    get_confirm_keyboard,
    get_admin_product_actions_keyboard,
    get_admin_category_actions_keyboard,
    get_admin_user_actions_keyboard,
    get_admin_order_actions_keyboard
)
from utils.helpers import is_admin, format_price, get_user_theme
from config import ADMIN_IDS
from utils.error_handler import error_handler, ValidationError, validate_price, validate_stock, sanitize_text

router = Router()


class AdminStates(StatesGroup):
    # Category states
    waiting_category_name = State()
    waiting_category_edit_name = State()
    
    # Product states
    waiting_product_category = State()
    waiting_product_name = State()
    waiting_product_description = State()
    waiting_product_price = State()
    waiting_product_sizes = State()
    waiting_product_stock = State()
    waiting_product_photos = State()
    
    # Edit product states
    editing_product_name = State()
    editing_product_description = State()
    editing_product_price = State()
    editing_product_sizes = State()
    editing_product_stock = State()
    editing_product_photos = State()
    
    # User management
    waiting_user_search = State()
    editing_user_balance = State()
    
    # Order management
    waiting_order_search = State()
    
    # Broadcast
    waiting_broadcast_message = State()


@router.message(Command("admin"))
@error_handler
async def admin_panel(message: Message, state: FSMContext):
    """Admin panel entry point"""
    with get_db() as db:
        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        await state.clear()
        
        # Get statistics
        total_users = crud.get_total_users(db)
        total_orders = crud.get_total_orders(db)
        total_revenue = crud.get_total_revenue(db)
        pending_orders = crud.get_pending_orders_count(db)
        
        theme = get_user_theme(db, message.from_user.id)
        
        text = f"""
<b>üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üì¶ –ó–∞–∫–∞–∑–æ–≤: {total_orders}
üí∞ –í—ã—Ä—É—á–∫–∞: {format_price(total_revenue)}
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pending_orders}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await message.answer(
            text,
            reply_markup=get_admin_main_keyboard(theme)
        )


# ============= CATEGORIES MANAGEMENT =============

@router.callback_query(F.data == "admin_categories")
@error_handler
async def admin_categories(callback: CallbackQuery, state: FSMContext):
    """Show categories management"""
    with get_db() as db:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        categories = crud.get_all_categories(db)
        theme = get_user_theme(db, callback.from_user.id)
        
        text = "<b>üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
        
        if categories:
            text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            for cat in categories:
                product_count = len(cat.products)
                text += f"‚Ä¢ {cat.name} ({product_count} —Ç–æ–≤–∞—Ä–æ–≤)\n"
        else:
            text += "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_categories_keyboard(categories, theme)
        )
        await callback.answer()


@router.callback_query(F.data == "admin_add_category")
async def admin_add_category(callback: CallbackQuery, state: FSMContext):
    """Start adding new category"""
    with get_db() as db:
        theme = get_user_theme(db, callback.from_user.id)
        
        await callback.message.edit_text(
            "<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=get_back_to_admin_keyboard(theme)
        )
        await state.set_state(AdminStates.waiting_category_name)
        await callback.answer()


@router.message(AdminStates.waiting_category_name)
@error_handler
async def process_category_name(message: Message, state: FSMContext):
    """Process new category name"""
    category_name = sanitize_text(message.text, max_length=100)
    
    if len(category_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
        return
    
    with get_db() as db:
        # Check if category exists
        existing = crud.get_category_by_name(db, category_name)
        if existing:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return
        
        # Create category
        crud.create_category(db, category_name)
        
        theme = get_user_theme(db, callback.from_user.id)
        categories = crud.get_all_categories(db)
        
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category_name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_admin_categories_keyboard(categories, theme)
        )
        await state.clear()


@router.callback_query(F.data.startswith("admin_edit_cat_"))
async def admin_edit_category(callback: CallbackQuery, state: FSMContext):
    """Edit category"""
    with get_db() as db:
        category_id = int(callback.data.split("_")[-1])
        
        category = crud.get_category(db, category_id)
        if not category:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        theme = get_user_theme(db, callback.from_user.id)
        
        await callback.message.edit_text(
            f"<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{category.name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_back_to_admin_keyboard(theme)
        )
        await state.set_state(AdminStates.waiting_category_edit_name)
        await state.update_data(category_id=category_id)
        await callback.answer()


@router.message(AdminStates.waiting_category_edit_name)
@error_handler
async def process_category_edit_name(message: Message, state: FSMContext):
    """Process edited category name"""
    category_name = sanitize_text(message.text, max_length=100)
    
    if len(category_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
        return
    
    with get_db() as db:
        data = await state.get_data()
        category_id = data.get("category_id")
        
        new_name = category_name
        
        # Check if name is taken
        existing = crud.get_category_by_name(db, new_name)
        if existing and existing.id != category_id:
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return
        
        # Update category
        crud.update_category(db, category_id, new_name)
        
        theme = get_user_theme(db, callback.from_user.id)
        categories = crud.get_all_categories(db)
        
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ <b>{new_name}</b>!",
            reply_markup=get_admin_categories_keyboard(categories, theme)
        )
        await state.clear()


@router.callback_query(F.data.startswith("admin_del_cat_"))
async def admin_delete_category(callback: CallbackQuery):
    """Delete category"""
    with get_db() as db:
        category_id = int(callback.data.split("_")[-1])
        
        category = crud.get_category(db, category_id)
        if not category:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # Check if category has products
        if category.products:
            await callback.answer(
                f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏ ({len(category.products)} —à—Ç). –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã.",
                show_alert=True
            )
            return
        
        crud.delete_category(db, category_id)
        
        theme = get_user_theme(db, callback.from_user.id)
        categories = crud.get_all_categories(db)
        
        await callback.message.edit_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category.name}</b> —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=get_admin_categories_keyboard(categories, theme)
        )
        await callback.answer()


# ============= PRODUCTS MANAGEMENT =============

@router.callback_query(F.data == "admin_products")
async def admin_products(callback: CallbackQuery):
    """Show products management"""
    with get_db() as db:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        categories = crud.get_all_categories(db)
        theme = get_user_theme(db, callback.from_user.id)
        
        if not categories:
            await callback.message.edit_text(
                "<b>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!",
                reply_markup=get_back_to_admin_keyboard(theme)
            )
            await callback.answer()
            return
        
        text = "<b>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_products_keyboard(categories, theme)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin_prod_cat_"))
async def admin_products_category(callback: CallbackQuery):
    """Show products in category"""
    with get_db() as db:
        category_id = int(callback.data.split("_")[-1])
        
        category = crud.get_category(db, category_id)
        if not category:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        products = category.products
        theme = get_user_theme(db, callback.from_user.id)
        
        text = f"<b>üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.name}</b>\n\n"
        
        if products:
            for prod in products:
                text += f"‚Ä¢ {prod.name} - {format_price(prod.price)}\n"
                text += f"  –û—Å—Ç–∞—Ç–æ–∫: {prod.stock} —à—Ç\n\n"
        else:
            text += "–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        buttons = []
        for prod in products:
            buttons.append([InlineKeyboardButton(
                text=f"‚úèÔ∏è {prod.name}",
                callback_data=f"admin_edit_prod_{prod.id}"
            )])
        
        buttons.append([InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
            callback_data=f"admin_add_prod_{category_id}"
        )])
        buttons.append([InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_products"
        )])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin_add_prod_"))
async def admin_add_product(callback: CallbackQuery, state: FSMContext):
    """Start adding new product"""
    with get_db() as db:
        category_id = int(callback.data.split("_")[-1])
        
        category = crud.get_category(db, category_id)
        if not category:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        theme = get_user_theme(db, callback.from_user.id)
        
        await callback.message.edit_text(
            f"<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category.name}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_back_to_admin_keyboard(theme)
        )
        await state.set_state(AdminStates.waiting_product_name)
        await state.update_data(category_id=category_id)
        await callback.answer()


@router.message(AdminStates.waiting_product_name)
async def process_product_name(message: Message, state: FSMContext):
    """Process product name"""
    await state.update_data(product_name=message.text.strip())
    await message.answer("<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.waiting_product_description)


@router.message(AdminStates.waiting_product_description)
async def process_product_description(message: Message, state: FSMContext):
    """Process product description"""
    await state.update_data(product_description=message.text.strip())
    await message.answer("<b>üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AdminStates.waiting_product_price)


@router.message(AdminStates.waiting_product_price)
@error_handler
async def process_product_price(message: Message, state: FSMContext):
    """Process product price"""
    try:
        price = validate_price(message.text)
        await state.update_data(product_price=price)
        await message.answer(
            "<b>üìè –†–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: S, M, L, XL):"
        )
        await state.set_state(AdminStates.waiting_product_sizes)
    except ValidationError as e:
        await message.answer(f"‚ùå {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@router.message(AdminStates.waiting_product_sizes)
async def process_product_sizes(message: Message, state: FSMContext):
    """Process product sizes"""
    sizes = [s.strip() for s in message.text.split(",")]
    await state.update_data(product_sizes=",".join(sizes))
    await message.answer("<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
    await state.set_state(AdminStates.waiting_product_stock)


@router.message(AdminStates.waiting_product_stock)
@error_handler
async def process_product_stock(message: Message, state: FSMContext):
    """Process product stock"""
    try:
        stock = validate_stock(message.text)
        await state.update_data(product_stock=stock)
        await message.answer(
            "<b>üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /done"
        )
        await state.update_data(product_photos=[])
        await state.set_state(AdminStates.waiting_product_photos)
    except ValidationError as e:
        await message.answer(f"‚ùå {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@router.message(AdminStates.waiting_product_photos, F.photo)
async def process_product_photo(message: Message, state: FSMContext):
    """Process product photos"""
    data = await state.get_data()
    photos = data.get("product_photos", [])
    
    # Get the largest photo
    photo = message.photo[-1]
    photos.append(photo.file_id)
    
    await state.update_data(product_photos=photos)
    await message.answer(f"‚úÖ –§–æ—Ç–æ {len(photos)} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")


@router.message(AdminStates.waiting_product_photos, Command("done"))
async def finish_product_creation(message: Message, state: FSMContext):
    """Finish product creation"""
    with get_db() as db:
        data = await state.get_data()
        
        photos = data.get("product_photos", [])
        if not photos:
            await message.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞!")
            return
        
        # Create product
        product = crud.create_product(
            db=db,
            name=data["product_name"],
            description=data["product_description"],
            price=data["product_price"],
            category_id=data["category_id"],
            sizes=data["product_sizes"],
            stock=data["product_stock"],
            photos=",".join(photos)
        )
        
        theme = get_user_theme(db, message.from_user.id)
        
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            reply_markup=get_back_to_admin_keyboard(theme)
        )
        await state.clear()


@router.callback_query(F.data.startswith("admin_edit_prod_"))
async def admin_edit_product(callback: CallbackQuery):
    """Show product edit menu"""
    with get_db() as db:
        product_id = int(callback.data.split("_")[-1])
        
        product = crud.get_product(db, product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        theme = get_user_theme(db, callback.from_user.id)
        
        photo_count = len(product.photos.split(',')) if product.photos else 0
        
        text = f"""
<b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>

<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description}
<b>–¶–µ–Ω–∞:</b> {format_price(product.price)}
<b>–†–∞–∑–º–µ—Ä—ã:</b> {product.sizes}
<b>–û—Å—Ç–∞—Ç–æ–∫:</b> {product.stock} —à—Ç
<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {photo_count}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_product_actions_keyboard(product_id, theme)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin_del_prod_"))
async def admin_delete_product(callback: CallbackQuery):
    """Delete product"""
    with get_db() as db:
        product_id = int(callback.data.split("_")[-1])
        
        product = crud.get_product(db, product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        category_id = product.category_id
        product_name = product.name
        
        crud.delete_product(db, product_id)
        
        await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä {product_name} —É–¥–∞–ª–µ–Ω!", show_alert=True)
        
        # Return to category products list
        await admin_products_category(callback)


# ============= USERS MANAGEMENT =============

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """Show users management"""
    with get_db() as db:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        users = crud.get_all_users(db, limit=20)
        theme = get_user_theme(db, callback.from_user.id)
        
        text = "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {crud.get_total_users(db)}\n\n"
        text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        
        for user in users:
            status = "üü¢" if user.is_active else "üî¥"
            text += f"{status} {user.username or user.telegram_id}\n"
            text += f"   ID: {user.telegram_id}\n"
            text += f"   –ó–∞–∫–∞–∑–æ–≤: {len(user.orders)}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_users_keyboard(users, theme)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin_user_"))
async def admin_user_details(callback: CallbackQuery):
    """Show user details"""
    with get_db() as db:
        user_id = int(callback.data.split("_")[-1])
        
        user = crud.get_user(db, user_id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        theme = get_user_theme(db, callback.from_user.id)
        
        total_spent = sum(order.total_amount for order in user.orders if order.status == "completed")
        
        text = f"""
<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>ID:</b> {user.telegram_id}
<b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>–ò–º—è:</b> {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {len(user.orders)}
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_price(total_spent)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_user_actions_keyboard(user_id, user.is_active, theme)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin_block_user_"))
async def admin_block_user(callback: CallbackQuery):
    """Block/unblock user"""
    with get_db() as db:
        user_id = int(callback.data.split("_")[-1])
        
        user = crud.get_user(db, user_id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Toggle active status
        crud.update_user_status(db, user_id, not user.is_active)
        
        status_text = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if not user.is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {status_text}!", show_alert=True)
        
        # Refresh user details
        await admin_user_details(callback)


# ============= ORDERS MANAGEMENT =============

@router.callback_query(F.data == "admin_orders")
async def admin_orders(callback: CallbackQuery):
    """Show orders management"""
    with get_db() as db:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        orders = crud.get_recent_orders(db, limit=15)
        theme = get_user_theme(db, callback.from_user.id)
        
        text = "<b>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        text += f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {crud.get_total_orders(db)}\n"
        text += f"–û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {crud.get_pending_orders_count(db)}\n\n"
        text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–∫–∞–∑–æ–≤:\n\n"
        
        for order in orders:
            status_emoji = {
                "pending": "‚è≥",
                "processing": "üîÑ",
                "completed": "‚úÖ",
                "cancelled": "‚ùå"
            }.get(order.status, "‚ùì")
            
            text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order.id}\n"
            text += f"   {format_price(order.total_amount)} ‚Ä¢ {order.created_at.strftime('%d.%m %H:%M')}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_orders_keyboard(orders, theme)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin_order_"))
async def admin_order_details(callback: CallbackQuery):
    """Show order details"""
    with get_db() as db:
        order_id = int(callback.data.split("_")[-1])
        
        order = crud.get_order(db, order_id)
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        theme = get_user_theme(db, callback.from_user.id)
        
        status_text = {
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            "processing": "üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω",
            "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
        }.get(order.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        text = f"""
<b>üì¶ –ó–∞–∫–∞–∑ #{order.id}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
<b>–î–∞—Ç–∞:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}
<b>–°—É–º–º–∞:</b> {format_price(order.total_amount)}

<b>üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>
ID: {order.user.telegram_id}
Username: @{order.user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

<b>üìã –¢–æ–≤–∞—Ä—ã:</b>
"""
        
        for item in order.items:
            text += f"‚Ä¢ {item.product.name}\n"
            text += f"  {item.quantity} —à—Ç √ó {format_price(item.price)} = {format_price(item.quantity * item.price)}\n"
        
        if order.delivery_address:
            text += f"\n<b>üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n{order.delivery_address}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_order_actions_keyboard(order_id, order.status, theme)
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin_order_status_"))
async def admin_change_order_status(callback: CallbackQuery):
    """Change order status"""
    with get_db() as db:
        parts = callback.data.split("_")
        order_id = int(parts[-2])
        new_status = parts[-1]
        
        order = crud.get_order(db, order_id)
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        crud.update_order_status(db, order_id, new_status)
        
        status_text = {
            "processing": "–≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
            "completed": "–∑–∞–≤–µ—Ä—à–µ–Ω",
            "cancelled": "–æ—Ç–º–µ–Ω–µ–Ω"
        }.get(new_status, new_status)
        
        await callback.answer(f"‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å: {status_text}!", show_alert=True)
        
        # Refresh order details
        await admin_order_details(callback)


# ============= STATISTICS =============

@router.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: CallbackQuery):
    """Show detailed statistics"""
    with get_db() as db:
        if not is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        theme = get_user_theme(db, callback.from_user.id)
        
        # Get statistics
        total_users = crud.get_total_users(db)
        total_orders = crud.get_total_orders(db)
        total_revenue = crud.get_total_revenue(db)
        pending_orders = crud.get_pending_orders_count(db)
        
        # Today's stats
        today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        today_orders = crud.get_orders_by_date_range(db, today_start, datetime.now())
        today_revenue = sum(o.total_amount for o in today_orders if o.status == "completed")
        
        # Week stats
        week_start = datetime.now() - timedelta(days=7)
        week_orders = crud.get_orders_by_date_range(db, week_start, datetime.now())
        week_revenue = sum(o.total_amount for o in week_orders if o.status == "completed")
        
        # Month stats
        month_start = datetime.now() - timedelta(days=30)
        month_orders = crud.get_orders_by_date_range(db, month_start, datetime.now())
        month_revenue = sum(o.total_amount for o in month_orders if o.status == "completed")
        
        # Top products
        top_products = crud.get_top_products(db, limit=5)
        
        text = f"""
<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
–í—Å–µ–≥–æ: {total_users}

<b>üì¶ –ó–∞–∫–∞–∑—ã:</b>
–í—Å–µ–≥–æ: {total_orders}
–û–∂–∏–¥–∞—é—Ç: {pending_orders}

<b>üí∞ –í—ã—Ä—É—á–∫–∞:</b>
–í—Å–µ–≥–æ: {format_price(total_revenue)}
–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {format_price(today_revenue)} ({len(today_orders)} –∑–∞–∫–∞–∑–æ–≤)
–ó–∞ –Ω–µ–¥–µ–ª—é: {format_price(week_revenue)} ({len(week_orders)} –∑–∞–∫–∞–∑–æ–≤)
–ó–∞ –º–µ—Å—è—Ü: {format_price(month_revenue)} ({len(month_orders)} –∑–∞–∫–∞–∑–æ–≤)

<b>üî• –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤:</b>
"""
        
        for i, (product, count) in enumerate(top_products, 1):
            text += f"{i}. {product.name} - {count} –ø—Ä–æ–¥–∞–∂\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_stats_keyboard(theme)
        )
        await callback.answer()


# ============= BROADCAST =============

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """Start broadcast message"""
    with get_db() as db:
        theme = get_user_theme(db, callback.from_user.id)
        
        await callback.message.edit_text(
            "<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=get_back_to_admin_keyboard(theme)
        )
        await state.set_state(AdminStates.waiting_broadcast_message)
        await callback.answer()


@router.message(AdminStates.waiting_broadcast_message)
@error_handler
async def process_broadcast(message: Message, state: FSMContext):
    """Process and send broadcast"""
    broadcast_text = sanitize_text(message.text, max_length=4000)
    
    if len(broadcast_text) < 5:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    
    with get_db() as db:
        users = crud.get_all_users(db)
        
        sent = 0
        failed = 0
        blocked = 0
        
        status_msg = await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞... 0/{len(users)}")
        
        for i, user in enumerate(users, 1):
            try:
                await message.bot.send_message(user.telegram_id, broadcast_text)
                sent += 1
            except Exception as e:
                if "blocked" in str(e).lower():
                    blocked += 1
                failed += 1
            
            if i % 5 == 0:
                try:
                    await status_msg.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞... {i}/{len(users)}")
                except:
                    pass
        
        theme = get_user_theme(db, message.from_user.id)
        
        await status_msg.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked}\n"
            f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed - blocked}",
            reply_markup=get_back_to_admin_keyboard(theme)
        )
        await state.clear()


# ============= NAVIGATION =============

@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery, state: FSMContext):
    """Return to admin main menu"""
    await state.clear()
    
    # Create a fake message to reuse admin_panel function
    fake_message = callback.message
    fake_message.from_user = callback.from_user
    fake_message.answer = callback.message.edit_text
    
    await admin_panel(fake_message, state)
    await callback.answer()
