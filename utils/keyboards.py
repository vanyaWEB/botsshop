from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List
from database.models import Category, Product, Order
import config
import json


def get_main_menu_keyboard(is_admin: bool = False, theme: str = 'light') -> InlineKeyboardMarkup:
    """Main menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    colors = config.THEMES[theme]
    
    builder.row(
        InlineKeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=f"{config.WEBAPP_URL}/catalog")),
    )
    builder.row(
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"),
        InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
    )
    builder.row(
        InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="about"),
        InlineKeyboardButton(text="üé® –¢–µ–º–∞", callback_data="toggle_theme")
    )
    
    if is_admin:
        builder.row(
            InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        )
    
    return builder.as_markup()


def get_back_button(callback_data: str = "main_menu") -> InlineKeyboardMarkup:
    """Back button"""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data))
    return builder.as_markup()


def get_categories_keyboard(categories: List[Category]) -> InlineKeyboardMarkup:
    """Categories keyboard"""
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        icon = category.icon or "üìÅ"
        builder.row(
            InlineKeyboardButton(
                text=f"{icon} {category.name}",
                callback_data=f"category_{category.id}"
            )
        )
    
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return builder.as_markup()


def get_products_keyboard(products: List[Product], category_id: int) -> InlineKeyboardMarkup:
    """Products keyboard"""
    builder = InlineKeyboardBuilder()
    
    for product in products:
        builder.row(
            InlineKeyboardButton(
                text=f"{product.name} - {product.price}‚ÇΩ",
                callback_data=f"product_{product.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")
    )
    return builder.as_markup()


def get_product_keyboard(product: Product, in_cart: bool = False) -> InlineKeyboardMarkup:
    """Product detail keyboard"""
    builder = InlineKeyboardBuilder()
    
    if product.stock > 0:
        if product.sizes:
            sizes = json.loads(product.sizes)
            for size in sizes:
                builder.add(
                    InlineKeyboardButton(
                        text=f"–†–∞–∑–º–µ—Ä {size}",
                        callback_data=f"add_to_cart_{product.id}_{size}"
                    )
                )
            builder.adjust(3)
        else:
            builder.row(
                InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                    callback_data=f"add_to_cart_{product.id}_none"
                )
            )
    else:
        builder.row(
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="noop")
        )
    
    if product.size_chart:
        builder.row(
            InlineKeyboardButton(text="üìè –†–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞", callback_data=f"size_chart_{product.id}")
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{product.category_id}")
    )
    
    return builder.as_markup()


def get_cart_keyboard(cart_items: List, total: float) -> InlineKeyboardMarkup:
    """Cart keyboard"""
    builder = InlineKeyboardBuilder()
    
    if cart_items:
        for item in cart_items:
            size_text = f" ({item.size})" if item.size else ""
            builder.row(
                InlineKeyboardButton(
                    text=f"‚ûñ",
                    callback_data=f"cart_decrease_{item.id}"
                ),
                InlineKeyboardButton(
                    text=f"{item.product.name}{size_text} x{item.quantity}",
                    callback_data="noop"
                ),
                InlineKeyboardButton(
                    text=f"‚ûï",
                    callback_data=f"cart_increase_{item.id}"
                ),
                InlineKeyboardButton(
                    text=f"üóë",
                    callback_data=f"cart_remove_{item.id}"
                )
            )
        
        builder.row(
            InlineKeyboardButton(text=f"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ({total}‚ÇΩ)", callback_data="checkout")
        )
        builder.row(
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_checkout_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """Checkout keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_order_{order_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order_id}")
    )
    
    return builder.as_markup()


def get_orders_keyboard(orders: List[Order]) -> InlineKeyboardMarkup:
    """Orders list keyboard"""
    builder = InlineKeyboardBuilder()
    
    for order in orders:
        status_emoji = {
            'pending': '‚è≥',
            'paid': '‚úÖ',
            'processing': 'üì¶',
            'shipped': 'üöö',
            'delivered': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order.status, '‚ùì')
        
        builder.row(
            InlineKeyboardButton(
                text=f"{status_emoji} {order.order_number} - {order.total_amount}‚ÇΩ",
                callback_data=f"order_{order.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_order_detail_keyboard(order: Order) -> InlineKeyboardMarkup:
    """Order detail keyboard"""
    builder = InlineKeyboardBuilder()
    
    if order.status == 'pending' and order.payment_status != 'succeeded':
        builder.row(
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_order_{order.id}")
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ö –∑–∞–∫–∞–∑–∞–º", callback_data="my_orders")
    )
    
    return builder.as_markup()


# Admin keyboards
def get_admin_panel_keyboard(theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin panel main menu with modern design"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="admin_orders")
    )
    builder.row(
        InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_categories"),
        InlineKeyboardButton(text="üõç –¢–æ–≤–∞—Ä—ã", callback_data="admin_products")
    )
    builder.row(
        InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_admin_main_keyboard(theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin panel main menu - alias for get_admin_panel_keyboard"""
    return get_admin_panel_keyboard(theme)


def get_admin_categories_keyboard(categories: List[Category], theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin categories management"""
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        builder.row(
            InlineKeyboardButton(
                text=f"üìÇ {category.name}",
                callback_data=f"admin_cat_view_{category.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
    )
    
    return builder.as_markup()


def get_admin_category_actions_keyboard(category_id: int, theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin category actions"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_edit_cat_{category_id}"),
    )
    builder.row(
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_del_cat_{category_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_categories")
    )
    
    return builder.as_markup()


def get_admin_products_keyboard(categories: List[Category], theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin products management - select category"""
    builder = InlineKeyboardBuilder()
    
    for category in categories:
        product_count = len(category.products)
        builder.row(
            InlineKeyboardButton(
                text=f"üìÇ {category.name} ({product_count})",
                callback_data=f"admin_prod_cat_{category.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
    )
    
    return builder.as_markup()


def get_admin_product_actions_keyboard(product_id: int, theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin product actions"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_edit_prod_name_{product_id}"),
        InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_edit_prod_desc_{product_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞", callback_data=f"admin_edit_prod_price_{product_id}"),
        InlineKeyboardButton(text="üìè –†–∞–∑–º–µ—Ä—ã", callback_data=f"admin_edit_prod_sizes_{product_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üì¶ –û—Å—Ç–∞—Ç–æ–∫", callback_data=f"admin_edit_prod_stock_{product_id}"),
        InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data=f"admin_edit_prod_photos_{product_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"admin_del_prod_{product_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_products")
    )
    
    return builder.as_markup()


def get_admin_orders_keyboard(orders: List[Order], theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin orders management"""
    builder = InlineKeyboardBuilder()
    
    for order in orders:
        status_emoji = {
            'pending': '‚è≥',
            'processing': 'üîÑ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(order.status, '‚ùì')
        
        builder.row(
            InlineKeyboardButton(
                text=f"{status_emoji} #{order.id} ‚Ä¢ {order.total_amount}‚ÇΩ",
                callback_data=f"admin_order_{order.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
    )
    
    return builder.as_markup()


def get_admin_order_actions_keyboard(order_id: int, status: str, theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin order actions"""
    builder = InlineKeyboardBuilder()
    
    if status == 'pending':
        builder.row(
            InlineKeyboardButton(text="üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data=f"admin_order_status_{order_id}_processing")
        )
    elif status == 'processing':
        builder.row(
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"admin_order_status_{order_id}_completed")
        )
    
    if status != 'cancelled':
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_order_status_{order_id}_cancelled")
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_orders")
    )
    
    return builder.as_markup()


def get_admin_users_keyboard(users: List, theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin users management"""
    builder = InlineKeyboardBuilder()
    
    for user in users:
        status = "üü¢" if user.is_active else "üî¥"
        name = user.username or f"ID{user.telegram_id}"
        builder.row(
            InlineKeyboardButton(
                text=f"{status} @{name}",
                callback_data=f"admin_user_{user.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
    )
    
    return builder.as_markup()


def get_admin_user_actions_keyboard(user_id: int, is_active: bool, theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin user actions"""
    builder = InlineKeyboardBuilder()
    
    block_text = "üü¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not is_active else "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    builder.row(
        InlineKeyboardButton(text=block_text, callback_data=f"admin_block_user_{user_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")
    )
    
    return builder.as_markup()


def get_admin_stats_keyboard(theme: str = 'light') -> InlineKeyboardMarkup:
    """Admin statistics keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
    )
    
    return builder.as_markup()


def get_back_to_admin_keyboard(theme: str = 'light') -> InlineKeyboardMarkup:
    """Back to admin panel button"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
    )
    return builder.as_markup()


def get_confirm_keyboard(action: str, item_id: int, theme: str = 'light') -> InlineKeyboardMarkup:
    """Confirmation keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}_{item_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_{action}")
    )
    
    return builder.as_markup()


def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """Subscription check keyboard"""
    builder = InlineKeyboardBuilder()
    
    if config.REQUIRED_CHANNEL_URL:
        builder.row(
            InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=config.REQUIRED_CHANNEL_URL)
        )
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
    )
    
    return builder.as_markup()
